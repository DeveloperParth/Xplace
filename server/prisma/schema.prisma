// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  Online
  Offline
  Idle
  DND
}

model User {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  email         String       @unique
  name          String
  password      String
  status        Status       @default(Offline)
  ownedServers  Server[]     @relation("OwnedServers")
  joinedServers Server[]     @relation("JoinedServers")
  Message       Message[]
  Roles         Role[]
  Invitation    Invitation[]
}

model Role {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  color      String
  Server     Server       @relation(fields: [serverId], references: [id])
  serverId   String
  Users      User[]
  Permission Permission[]
}

model Permission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  Roles     Role[]
}

model Invitation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  code      String    @unique
  Server    Server    @relation(fields: [serverId], references: [id])
  serverId  String
  User      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Server {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String
  photo     String?
  Owner     User         @relation("OwnedServers", fields: [ownerId], references: [id])
  ownerId   String
  Members   User[]       @relation("JoinedServers")
  Messages  Message[]
  Roles     Role[]
  Invite    Invitation[]
}

model Message {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  text      String
  isEdited  Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  Server    Server?   @relation(fields: [serverId], references: [id])
  serverId  String?
  ReplyTo   Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replyToId String?
  Replies   Message[] @relation("ReplyTo")
}
