// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  Online
  Offline
  Idle
  DND
}

model User {
  id            String         @id @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  email         String         @unique
  name          String
  password      String
  status        Status         @default(Offline)
  OwnedServers  Server[]       @relation("OwnedServers")
  JoinedServers ServerMember[]
  Messages      Message[]
  Invitation    Invitation[]
}

model Role {
  id          String              @id @default(uuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  name        String
  color       String
  position    Int
  Server      Server              @relation(fields: [serverId], references: [id])
  serverId    String
  Permissions PermissionsOnRole[]
  Users       ServerMember[]
}

model PermissionsOnRole {
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  Permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
  allowed      Boolean    @default(false)

  @@id([roleId, permissionId])
}

model Permission {
  id        String              @id @default(uuid())
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  name      PermissionTypes
  Roles     PermissionsOnRole[]
}

model Invitation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  code      String    @unique
  Server    Server    @relation(fields: [serverId], references: [id])
  serverId  String
  User      User      @relation(fields: [userId], references: [id])
  userId    String
}

model Server {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  name       String
  photo      String?
  Owner      User           @relation("OwnedServers", fields: [ownerId], references: [id])
  ownerId    String
  Roles      Role[]
  Invite     Invitation[]
  Channels   Channel[]
  Categories Category[]
  Message    Message[]
  Members    ServerMember[]
}

model ServerMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Server    Server   @relation(fields: [serverId], references: [id])
  serverId  String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Roles     Role[]
}

model Category {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  Server    Server    @relation(fields: [serverId], references: [id])
  serverId  String
  Channels  Channel[]
}

model Channel {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  Server     Server       @relation(fields: [serverId], references: [id])
  serverId   String
  Messages   Message[]
  type       ChannelTypes
  Category   Category?    @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Message {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  text      String
  isEdited  Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  Server    Server?   @relation(fields: [serverId], references: [id])
  serverId  String?
  ReplyTo   Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replyToId String?
  Replies   Message[] @relation("ReplyTo")
  Channel   Channel?  @relation(fields: [channelId], references: [id])
  channelId String?
}

enum PermissionTypes {
  invitePeople
  kickPeople
  banPeople
  manageRoles
  manageChannels
  manageServer
  manageInvites
  manageMessages
}

enum ChannelTypes {
  text
  voice
}
